video source:
https://www.youtube.com/watch?v=KM1U6DqZf8M&list=PL4cUxeGkcC9hYYGbV60Vq3IXYNfDk8At1&index=5&ab_channel=TheNetNinja

content: 
styles, props, dynamic class, modal window, Прокидання інфи з дочірнього компонента в батьківський
($emet), click event modifier, slots, named slots



Стилі (styles):
Якщо потрібно застосувати стиль тільки до конкретного елемента, тоді в його style додаємо scoped:
(це згенерує для цих стилів [data] атрибут)

<style scoped>

</style>

Можна просто стилізувати тільки елементи які знаходяться в батьківському елементі:
(якщо батьківському елементу надати class="main", і тоді стилізувати все що в main)

<style>
    .main h1 {}
</style>

Якщо ж потрібно створити загальні стилі, то тоді в папці assets створюємо global.css та імпортуємо
його в main.js (import './assets/global.css')




Пропси (props):
Як і в React, пропсу передаємо в розмітку parent component і приймаємо в child component:

parent component:

<template>
    <Modal header="Props header"/>    <--- передаємо props header (1)
</template>

child component: 

<template>
    <div class="backdrop">
        <div class="modal">
            <h3>{{header}}</h3>     <--- виводимо в розмітку props header (3)
        </div>
    </div>
</template>

<script>
    export default {
        props: ["header"],      <--- реєструємо props header (2)
    }
</script>

!Однак, якщо потрібно в пропсу передати не стрінгу, а змінну, перед пропсою потрібно поставити ":" :

<template>
    <Modal header="Props header" :text="text"/>
</template>

<script>
import Modal from './components/Modal.vue'
export default {
  components: {Modal},
  data() {
    return {
        text: "props text"
    }
  }
}
</script>




Динамічний клас (dynamic class)
Наприклад, можна передавати динамічний клас і поставити умову, якщо він вірний (true) - клас буде 
застосовуватись:

Передамо з App в Modal theme="sale"

<template>
    <Modal header="Props header" :text="text" theme="sale"/>
</template>

В Modal приймемо і встановимо для <div class="modal"></div> ще один динамічний клас
:class="{sale: theme === 'sale'}" :

<template>
    <div class="backdrop">
        <div class="modal" :class="{sale: theme === 'sale'}">
            <h3>{{header}}</h3>
            <p>{{text}}</p>
        </div>
    </div>
</template>

export default {
    props: ["header","text","theme"],
}

І в css пропишемо умову якщо буде застосовано клас "sale":

.modal.sale {
    background: steelblue;
    color: white;
}




Модальне вікно (modal window)
Створимо вспливаюче модальне вікно при кліку (наш Modal):

- в розмітку додаємо умову і кнопку, яка запускатиме модальне вікно:

<div v-if="showModal">      <--- умова (повинно бути true)
    <Modal :header="header" :text="text" theme="sale" @close="toggleModal"/>
</div>
<button @click="toggleModal">open modal</button>        <--- кнопка
        ---------------------

- додаємо в скрипт метод, для виконання умови:

data() {
  return {
      text: "props text",
      header: "Props header",
      showModal: false          <--- умова, за замовчуванням false (модальне вікно не відображається)
  }
},
methods: {
  toggleModal() {
      this.showModal = !this.showModal      <--- функція для зміни умови
  }
}




Прокидання інфи з дочірнього компонента в батьківський ($emet)
Тепер, коли модальне вікно виводиться, нам потрібно його закривати при кліку на поле за ним (решта
екрану); для цього потрібно отримати доступ до <div class="backdrop"></div>, який знаходиться в 
компоненті Modal; для цього потрібно передати інформацію з дочірнього компонента в батьківському;
для реалізації цього використовують $emit :

- при кліку на це поле викличемо функцію closeModal в компоненті Modal:

<div class="backdrop" @click="closeModal">
                      -------------------

- пропишемо метод closeModal, який передаватиме в батьківський компонент як пропсу "close" :

methods: {
    closeModal() {
        this.$emit("close")
    }
}

- в батьківському компоненті приймемо її і передамо функцію toggleModal; тобто тепер при кліку на 
<div class="backdrop" @click="closeModal"> ми викликатимемо функцію toggleModal :

<Modal :header="header" :text="text" theme="sale" @close="toggleModal"/>
                                                  ---------------------




Модифікація клік події (click event modifier) : 
для цього потрібно через крапку біля події вказати модифікатор (напр, щоб подія відбувалась при зажатих
клавішах alt, shift, doubleclick)

У нашому випадку ми додамо модифікатор self, аби подія відбувалась лише при кліку на даний блок, а не
на дочірні блоки в ньому :

<div class="backdrop" @click.self="closeModal">
                      -------------





Слоти (slots):
Якщо нам потрібно передати не просто невелику інформацію (стрінгу, число, буліан), а цілу розмітку,
заповнену інформацією використовують слоти (slots) :

- для цього в батьківському компоненті просто розгортаємо викликаний дочірній компонент і в середину
передаємо необхідну розмітку з інформацією :

<Modal theme="sale" @close="toggleModal">
  <h1>Slot Header</h1>
  <p>Slot Text</p>
</Modal>

- і викликаємо слот в дочірньому компоненті :

<div class="modal" :class="{sale: theme === 'sale'}">
    <slot></slot>
</div>




Якщо ж потрібно передати спеціальні слоти, які потрібно викликати в інших місцях дочірнього компоненту,
а не разом зі стандартним слотом :

- створюємо іменний слот в окремому <template></template> і даємо йому ідентифікатор (v-slot:links) :

<Modal theme="sale" @close="toggleModal">

  <template v-slot:links>       <--- слот з ідентифікатором
    <a href="#">Something</a>
    <a href="#">Anything</a>
  </template>

  <h1>Slot Header</h1>          <--- загальний слот
  <p>Slot Text</p>
</Modal>

- в дочірньому компоненті викликаємо слот, якому в поле name вказуємо ідентифікатор
(<slot name="links"></slot>) :

<div class="modal" :class="{sale: theme === 'sale'}">
    
    <slot></slot>                       <--- тут відобразиться загальний слот
    <div class="actions">
        <slot name="links"></slot>      <--- тут буде слот з ідентифікатором
    </div>

</div>


